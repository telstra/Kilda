plugins {
    id 'groovy'
}
repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

description = 'Performance-Tests'
dependencies {
    implementation(platform('org.springframework:spring-framework-bom:5.0.7.RELEASE'))

    implementation project(':test-library')
    implementation project(':functional-tests')
    
    implementation('com.fasterxml.jackson.core:jackson-databind')
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'

    implementation 'org.codehaus.groovy:groovy-all:3.0.6'

    implementation 'org.codehaus.gpars:gpars:1.2.1'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl'
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation 'org.apache.logging.log4j:log4j-core'

    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'org.glassfish:javax.el'

    implementation 'org.spockframework:spock-spring:2.0-groovy-3.0-SNAPSHOT'
    implementation 'org.spockframework:spock-core:2.0-groovy-3.0-SNAPSHOT'
//    implementation 'com.athaydes:spock-reports:2.0.1-RC3'
    implementation 'net.jodah:failsafe'
}

test {
    exclude '**/*'
}

task performanceTest(type: Test, dependsOn: 'compileGroovy') {
    description = 'Runs performance tests.'
    failFast = true
    include '**/performancetests/**'
    systemProperty 'tags', System.getProperty('tags')
    Properties properties = new Properties()
    File propertiesFile = file("kilda.properties.example")
    propertiesFile.withInputStream {
        properties.load(it)
    }
    properties.keys().each { k ->
        if (System.getProperty(k)) {
            systemProperty k, System.getProperty(k)
        }
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    outputs.upToDateWhen { false } //never cache results of functional tests
}